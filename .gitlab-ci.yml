image: emundo/docker-compose-openjdk-node-gradle:latest
include:
  local: gitlab-ci/kube-deploy.gitlab-ci.yaml

variables:
  # Deaktiviere den Gradle Daemon: https://docs.gradle.org/current/userguide/gradle_daemon.html#sec:why_the_daemon
  # Verwende nicht GRADLE_OPTS sondern JAVA_OPTS, sonst wird die JVM nicht mit den Settings gestartet
  JAVA_OPTS: "-Dorg.gradle.daemon=false"

stages:
  - test-and-build
  - docker
  - build
  - review
  - cleanup
  - deploy
cache:
  paths:
    - .gradle

before_script:
  # Wir legen die Gradle und die Java Libs in den Job-übergreifenden Cache
  - export GRADLE_USER_HOME=`pwd`/.gradle


unittest:
  stage: test-and-build
  script:
    # Test laufen lassen
    - gradle --parallel test

build:
  stage: test-and-build
  script:
    - gradle clean assemble dockerRest
  artifacts:
    paths:
      - docker/rest/deploy/*
    expire_in: 1 hrs

docker-container:
  image: docker:stable-dind
  stage: docker
  # Services und variables um docker in docker nutzen zu können
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://localhost:2375
  script:
    # Tag with commit tag or latest if not aviable.
    - "[[ -z $CI_COMMIT_TAG ]] && CI_COMMIT_TAG=$CI_COMMIT_REF_SLUG"
    - "[[ $CI_COMMIT_REF_NAME -eq 'master' ]] && CI_COMMIT_TAG=latest"
    - "export CI_COMMIT_TAG"

    # Führe Login durch, da ggf. Images aus unserer Registry benötigt werden
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

    # Baue einzelne Docker Images
    - docker build --pull --tag "$CI_REGISTRY_IMAGE/server:$CI_COMMIT_TAG" docker/rest

    # Führe nochmal ein Login durch, falls ein Build länger dauert
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

    # Pushe Images in Registry
    - docker push "$CI_REGISTRY_IMAGE/server"
